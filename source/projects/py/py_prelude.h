// py_prelude.h: pure python functions for the `py` external
// generated by `py/scripts/py2c.py`

static const char* PY_PRELUDE_MODULE =
"\n"
"import os\n"
"import subprocess\n"
"import shlex\n"
"import collections.abc\n"
"import functools\n"
"from inspect import signature as __signature\n"
"\n"
"EDITOR = \"Sublime Text\"\n"
"\n"
"def is_sequence(obj):\n"
"    if isinstance(obj, str):\n"
"        return False\n"
"    return isinstance(obj, collections.abc.Sequence)\n"
"\n"
"def __compose(f, g):\n"
"\n"
"    return lambda x: f(g(x))\n"
"\n"
"def __analyze(s: str):\n"
"    fs = []\n"
"    args = []\n"
"    kwargs = []\n"
"    str_args = s.split()\n"
"    for str_arg in str_args:\n"
"        if '=' in str_arg:\n"
"            k, v = str_arg.split('=')\n"
"            kwargs.append((\n"
"                eval(repr(k), locals(), globals()),\n"
"                eval(v, locals(), globals())\n"
"            ))\n"
"        else:\n"
"            try:\n"
"                elem = eval(str_arg, locals(), globals())\n"
"            except SyntaxError:\n"
"                elem = eval(repr(str_arg), locals(), globals())\n"
"            if callable(elem):\n"
"                fs.append(elem)\n"
"            else:\n"
"                args.append(elem)\n"
"    return fs, args, kwargs\n"
"\n"
"def __list_to_dict(xs, d={}):\n"
"\n"
"    if not xs:\n"
"        return d\n"
"    seps =  []\n"
"    n = len(xs)\n"
"    for i, o in enumerate(xs):\n"
"        if o == ':':\n"
"            seps.append(i)\n"
"\n"
"    it = iter(seps)\n"
"    start = next(it)\n"
"    try:\n"
"        end = next(it)\n"
"        key = xs[0]\n"
"        values = xs[start+1:end-1]\n"
"        if len(values) == 1:\n"
"            values = values[0]\n"
"        d[key] = values\n"
"    except StopIteration:\n"
"        key = xs[0]\n"
"        values = xs[start+1:]\n"
"        if len(values) == 1:\n"
"            values = values[0]\n"
"        d[key] = values\n"
"        return d\n"
"    return f(xs[end-1:], d)\n"
"\n"
"def shell(cmd: str, err_func=None):\n"
"    result = None\n"
"    try:\n"
"        elems = shlex.split(cmd)\n"
"        elems[-1] = os.path.expanduser(elems[-1])  \n"
"        result = subprocess.check_output(elems, encoding=\"utf8\").strip()\n"
"    except subprocess.CalledProcessError as e:\n"
"        if err_func:\n"
"            err_func(e.stderr)\n"
"    except FileNotFoundError as e:\n"
"        if err_func:\n"
"            err_func(e.strerror)\n"
"    if result:\n"
"        return result\n"
"\n"
"def out_dict(py_dict: dict):\n"
"\n"
"    res = []\n"
"    for k, v in py_dict.items():\n"
"        res.append(k)\n"
"        res.append(\":\")\n"
"        if type(v) in [list, set, tuple]:\n"
"            for i in v:\n"
"                res.append(i)\n"
"        else:\n"
"            res.append(v)\n"
"    return res\n"
"\n"
"def pipe(s: str):\n"
"\n"
"    fs, args, kwargs = __analyze(s)\n"
"    if args and fs:\n"
"        if len(args) == 1:\n"
"            arg = args[:].pop()\n"
"            for f in fs:\n"
"                arg = f(arg)\n"
"            return arg\n"
"        else:\n"
"            for f in fs:\n"
"                try:\n"
"                    args = list(map(f, args))\n"
"                except TypeError:\n"
"                    args = f(args)\n"
"            if args:\n"
"                return args\n"
"\n"
"def call(s: str):\n"
"\n"
"    fs, args, kwargs = __analyze(s)\n"
"    if len(fs) == 1:\n"
"        f = fs[0]\n"
"        try:\n"
"            return f(*args, **dict(kwargs))\n"
"        except TypeError:\n"
"            return f(args, **dict(kwargs))\n"
"\n"
"        return f(args[0])\n"
"\n"
"def fold(s: str):\n"
"\n"
"    fs, args, kwargs = __analyze(s)\n"
"    if len(fs) == 1:\n"
"        f = fs[0]\n"
"        accum, seq = args[0], args[1:]\n"
"        if len(seq) == 1:\n"
"            seq = seq[0]\n"
"        return functools.reduce(f, seq, accum)\n"
"    else:\n"
"        res = []\n"
"        for f in fs:\n"
"            accum, seq = args[0], args[1:]\n"
"            if len(seq) == 1:\n"
"                seq = seq[0]\n"
"            res.append(functools.reduce(f, seq, accum))\n"
"        return res\n"
"\n"
"def to_string(func, *args, **kwds):\n"
"\n"
"    res = [func]\n"
"    res.extend(args)\n"
"    res.extend(out_dict(kwds))\n"
"    return \" \".join(str(i) for i in res)\n"
"\n"
"def from_string(s: str):\n"
"\n"
"    args = []\n"
"    kwds = []\n"
"    xs = s.split()\n"
"    f = xs[0]\n"
"    xs = xs[1:]\n"
"    if ':' in xs:\n"
"        z = xs.index(':')\n"
"        kwds = xs[z-1:]\n"
"        args = xs[:z-1]\n"
"    else:\n"
"        kwds = []\n"
"        args = xs\n"
"    return f, tuple(args), __list_to_dict(kwds, d={})\n"
"\n"
"def edit(path: str):\n"
"\n"
"    editor = os.getenv(\"EDITOR\", EDITOR)\n"
"    path = os.path.expanduser(path)\n"
"    shell(f\"open -a '{editor}' '{path}'\")\n"
"\n"
"def product(*args):\n"
"\n"
"    result = 1\n"
"    for arg in args:\n"
"        result *= arg\n"
"    return result\n"
"\n"
"def sig(func):\n"
"\n"
"    name = func.__qualname__\n"
"    signature = str(__signature(func))\n"
"    return f\"<function {name}{signature}>\"\n"
"\n";
