---
title: "pyjs: a python3 jsextension for max"
---

General purpose python3 jsextension, which means that it is a c-based Max external which can be accessed via the javascript `js` object or the `v8` object introduced in Max 9.

```text
pyjs max external (jsextension)
    attributes
        name                     : unique object name
        file                     : file to load in object namespace
        pythonpath               : add path to python sys.path
        debug                    : switch debug logging on/off
    
    methods 
        core (messages)
            import <module>      : python import to object namespace
            eval <expression>    : python 'eval' semantics
            exec <stmnt>         : python 'exec' semantics
            execfile <path>      : python 'execfile' semantics
        
        extra
            code <expr|stmt>     : eval/exec/import python code (see above)
            

        in-code (non-message)
            eval_to_json <expr>  : python 'eval' returns json

```

Note that the source files in this projects are soft-linked from the `py` project. The reason for this is that the `py` and `pyjs` were originally developed together and there is still extensive non-cmake driven build infrastructure which assumes this.

## Building

On macOS, the `pyjs` external has the same dependencies as the `py` external and is also included in the very large number of build variants which can built so please consult the [py](https://github.com/shakfu/py-js/tree/main/source/projects/py) external documentation section for more details about this.

It can also be built alone via `make pyjs` or with the `py` external via `make core`. It is also built if `make projects` is called.

On Windows, provided you have the requisite Visual Studio Community (or above) compiler and cmake as well as python3 installed (see `py` docs for more details on requirements), the above `make` targets will also work for Windows if `make.exe` is installed.

Otherwise, you can build the `pyjs` external which links to local system python by doing the following inside your `Documents\\Max [8 or 9]\\Packages` folder:

```sh
git clone --recursive https://github.com/shakfu/py-js
cd py-js
mkdir build
cd build
cmake .. -DBUILD_TARGETS=pyjs
cmake --build . --config Release
```

If you want to build a relocatable python3 external for Windows version which can be used in Max packages and standalones the following option is also available:

```sh
python source\\scripts\\buildpy.py -t windows-pkg
mkdir build
cd build
cmake .. -DBUILD_TARGETS=pyjs -DBUILD_VARIANT=windows-pkg
cmake --build . --config Release
```

## Overview

The `pyjs` max external/jsextension provides a `PyJS` class and a minimal subset of the `py` external's features which work well with the Max `js` object or the `v8` object and javascript code (like returning json directly from evaluations of python expressions).

The external has access to builtin python modules and the whole universe of 3rd party modules.

General purpose python3 jsextension, which means that it's a c-based Max external which can only be accessed via the javascript `js` or `v8` interface.

```text
pyjs max external (jsextension)
    attributes
        name                     : unique object name
        file                     : file to load in object namespace
        pythonpath               : add path to python sys.path
        debug                    : switch debug logging on/off
    
    methods 
        core (messages)
            import <module>      : python import to object namespace
            eval <expression>    : python 'eval' semantics
            exec <stmnt>         : python 'exec' semantics
            execfile <path>      : python 'execfile' semantics
        
        extra
            code <expr|stmt>     : eval/exec/import python code (see above)
            

        in-code (non-message)
            eval_to_json <expr>  : python 'eval' returns json

```

### Key Features

The `pyjs` external implements the following c-level methods:

category | method       | param(s)      | in/out | can change ns
:------- | :----------- | :------------ | :----: | :------------:
core     | import       | module        | in     | yes
core     | eval         | expression    | out    | no
core     | exec         | statement     | in     | yes
core     | execfile     | file          | in     | yes
extra    | code         | expr or stmt  | out?   | yes
in-code  | eval_to_json | expression    | out    | no

Note that the `code` method allows for import/exec/eval of python code, which can be said to make those 'fit-for-purpose' methods redundant. However, it has been retained because it provides additional strictness and provides a helpful prefix in messages which indicates message intent.

#### Core

py/js's *core* features have a one-to-one correspondance to python's *very high layer* as specified [here](https://docs.python.org/3/c-api/veryhigh.html). In the following, when we refer to *object*, we refer to instances of the `pyjs` external.

- **Per-object namespaces**. Each object has a unique name (which is provided automatically or can be set by the user), and responds to an `import <module>` message which loads the specified python module in its namespace (essentially a `globals` dictionary). Notably, namespaces can be different for each instance.

- **Eval Messages**. Responds to an `eval <expression>` message in the left inlet which is evaluated in the context of the namespace.`pyjs` objects just return an `atomarray` of the results.

- **Exec Messages**. Responds to an `exec <statement>` message and an `execfile <filepath>` message which executes the statement or the file's code in the object's namespace. For `pyjs` objects no output is given.

#### Extra

The *extra* category of methods  makes the `pyjs` object play nice with the max/msp ecosystem:

- **Evaluate to JSON**. Can be used in javascript code only to automatically serialize the results of a python expression as a json string as follows: `evaluate_to_json <expression> -> JSON`.

#### Editing Support

For `pyjs` objects, code editing is already provided by the [js](https://docs.cycling74.com/max8/refpages/js) Max object.

### Deployment Scenarios

There are 3 general deployment variations:

1. **Linked to system python**. Linking the externals to your system python (homebrew, built from source, etc.) This has the benefit of re-using your existing python modules and is the default option.

2. **Embedded in package**. Embedding the python interpreter in a Max package: in this variation, a dedicated python distribution (zipped or otherwise) is placed in the `support` folder of the `py/js` package (or any other package) and is linked to the `pyjs` extension (or both). This makes it size efficient and usable in standalones.

3. **Embedded in external**. The external itself as a container for the python interpreter: a custom python distribution (zipped or otherwise) is stored inside the external bundle itself, which can make it portable and usable in standalones.

As of this writing all three deployment scenarios are availabe, however it is worth looking more closely into the tradeoffs in each case, and a number of build variations exist.

Deployment Scenario    | `pyjs`
:--------------------- | :--------:
Linked to sys python   | yes
Embeddded in package   | yes
Embeddded in external  | yes

Please review the [py](https://github.com/shakfu/py-js/tree/main/source/projects/py) documentation for more information about building in the case of (2) and (3). Since the `py` and `pyjs` are built together simultaneously, the information provided there is quite relevent for `pyjs`.

## Caveats

- Packaging and deployment of python3 externals has improved considerably but is still a work-in-progress: basically needing further documentation, consolidation and cleanup. For example, there are currently two build systems which overlap: a python3 based build system to handle complex packaging cases and cmake for handling the quick and efficient development builds and general cases.

- `core` features relying on pure python code are supposed to be the most stable, and *should* not crash under most circumstances, `extra` features are less stable since they are more experimental, etc..
